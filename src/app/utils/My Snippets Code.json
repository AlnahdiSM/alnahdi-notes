{"id":1,"parentId":-1,"label":"snippets","lastId":21,"folder":true,"children":[{"id":7,"parentId":1,"label":"API","folder":true,"children":[{"id":6,"parentId":7,"label":"Fetch All Function Template","value":"export const fetchStudents = async () => {\r\n  const response = await fetch(\"http://localhost:3000/students\");\r\n  const data = response.json();\r\n  return data;\r\n};","language":".ts","children":[]},{"id":8,"parentId":7,"label":"Call Fetch Function By useEffect","value":"const [students,setStudents] = useState<student[]>([])\n  useEffect(()=>{\n    fetchStudents().then((data)=>{\n      setStudents(data)\n    })\n  },[])","language":".tsx","children":[]},{"id":9,"parentId":7,"label":"Create Function By Fetch Method","value":"export const createStudent = async (student:student) => {\r\n  const response = await fetch(\"http://localhost:3000/students\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(student),\r\n  })\r\n  const data = await response.json()\r\n  return data\r\n}","language":".ts","children":[]}]},{"id":4,"parentId":1,"label":"MongoDB & Mongoose","folder":true,"icon":"","children":[{"id":2,"parentId":4,"label":"connect to MongoDB","value":"mongoose.connect('mongodb://127.0.0.1:27017/[dataBaseName]')\n  .then(() => console.log('Connected to MongoDB'))\n    .catch((err) => console.log(err));","language":".ts","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":3,"parentId":4,"label":"Mongoose Model Template for TypeScript","value":"import mongoose, { Schema, Document } from \"mongoose\";\n\ninterface IModelTemplate extends Document {\n    field1: string;\n    field2: string;\n    field3: number;\n    field4: string;\n    field5: string;\n}\n\nconst modelTemplateSchema = new Schema<IModelTemplate>({\n    field1: {\n        type: String,\n        required: true\n    },\n    field2: {\n        type: String,\n        required: true\n    },\n    field3: {\n        type: Number,\n        required: true\n    },\n    field4: {\n        type: String,\n        required: true\n    },\n    field5: {\n        type: String,\n        required: true\n    }\n});\n\nexport default mongoose.model<IModelTemplate>(\"ModelTemplate\", modelTemplateSchema);\n","language":".ts","children":[],"resolveSyntax":false,"description":"","prefix":""}]},{"id":5,"parentId":1,"label":"Router Template","value":"import { Router } from \"express\";\nimport { studentModel } from \"../models/student\";\n\nconst router = Router();\n\n// Define a route for fetching all items\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const students = await studentModel.find();\n    res.status(200).send(students);\n  } catch (err) {\n    res.status(500).send(err);\n  }\n});\n\n// Define a route for fetching a single item\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const id = req.params.id;\n    const student = await studentModel.findById(id);\n    if (!student) {\n      return res.status(404).send(\"Student not found\");\n    }\n    res.status(200).send(student);\n  } catch (err) {\n    res.status(500).send(err);\n  }\n});\n\n// Define a route for creating an item\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const student = req.body;\n    const newStudent = await studentModel.create(student);\n    res.status(201).send(newStudent);\n  } catch (err) {\n    res.status(500).send(err);\n  }\n});\n\n// Define a route for updating an item\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const id = req.params.id;\n    const data = req.body;\n    const student = await studentModel.findByIdAndUpdate(id, data, {\n      new: true,\n    });\n    if (!student) {\n      return res.status(404).send(\"Student not found\");\n    }\n    res.status(200).send(student);\n  } catch (err) {\n    res.status(500).send(err);\n  }\n});\n\n// Define a route for deleting an item\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    const id = req.params.id;\n    const student = await studentModel.findByIdAndDelete(id);\n    if (!student) {\n      return res.status(404).send(\"Student not found\");\n    }\n    res.status(200).send(student);\n  } catch (err) {\n    res.status(500).send(err);\n  }\n});\n\nexport default module.exports = router;\n","language":".ts","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":10,"parentId":1,"label":"Nodemon Config","value":"{\r\n  \"watch\": [\"src\"],\r\n  \"ext\": \".ts,.js\",\r\n  \"ignore\": [],\r\n  \"exec\": \"ts-node ./src/index.ts\"\r\n}","language":".json","children":[]},{"id":11,"parentId":1,"label":"Entry Point Of Index","value":"import express from 'express'\r\nimport mongoose from 'mongoose'\r\n\r\nconst app = express()\r\nconst PORT = 3001\r\n\r\napp.use(express.json())\r\n\r\nmongoose.connect('mongodb://127.0.0.1:27017/[dataBaseName]')\r\n  .then(() => console.log('Connected to MongoDB'))\r\n    .catch((err) => console.log(err));\r\n\r\napp.listen(PORT, () => console.log(`Server is running on port ${PORT}`))","language":".ts","children":[]},{"id":12,"parentId":1,"label":"Tabs Template ","value":"\"use client\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { usePathname, useRouter } from \"next/navigation\";\n\nexport default function TabsComponent() {\n  const { push } = useRouter();\n  const pathname = usePathname();\n  const activeTab = pathname.includes(\"rejected\")\n    ? \"rejected\"\n    : pathname.includes(\"accepted\")\n    ? \"accepted\"\n    : \"applicants\";\n  const handleTabClick = (tabName: string) => {\n    if (tabName == \"accepted\" || tabName == \"rejected\") {\n      push(`/dashboard/admission-and-registration/${tabName}`);\n    } else if (tabName == \"applicants\") {\n      push(`/dashboard/admission-and-registration`);\n    }\n  };\n\n  return (\n    <Tabs\n      className=\"w-full\"\n      defaultValue={activeTab}\n      onValueChange={handleTabClick}\n    >\n      <TabsList className=\"bg-transparent\">\n        <TabsTrigger value=\"applicants\">\n          <div className=\"flex justify-center items-center gap-x-4\">\n            <span>المتقدمين</span>\n            <Badge className=\"\">55</Badge>\n          </div>\n        </TabsTrigger>\n        <TabsTrigger value=\"accepted\">\n          <div className=\"flex justify-center items-center gap-x-4\">\n            <span>المقبولين</span>\n            <Badge className=\"\">55</Badge>\n          </div>\n        </TabsTrigger>\n        <TabsTrigger value=\"rejected\">\n          <div className=\"flex justify-center items-center gap-x-4\">\n            <span>المرفوضين</span>\n            <Badge className=\"\">55</Badge>\n          </div>\n        </TabsTrigger>\n      </TabsList>\n    </Tabs>\n  );\n}\n","language":".tsx","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":14,"parentId":1,"label":"React Query","folder":true,"children":[{"id":13,"parentId":14,"label":"useQuery","value":"const {\n    data: orgTypes,\n    isLoading,\n    error,\n  } = useQuery<BriefObj[]>({\n    queryKey: ['governorate'],\n    queryFn: () => getApi(`/Governorate`),\n  })","language":".tsx","children":[]}]},{"id":16,"parentId":1,"label":"Appwrite","folder":true,"children":[{"id":17,"parentId":16,"label":"Initializing Appwrite Client and Database Configuration","folder":true,"children":[{"id":15,"parentId":17,"label":"appwrite","value":"// Import the Client and Databases classes from the Appwrite library\nimport { Client, Databases } from \"appwrite\";\n\n// Create a new instance of the Client class\nexport const client = new Client()\n  // Set the endpoint URL for the Appwrite API\n  .setEndpoint(\"https://cloud.appwrite.io/v1\")\n  // Set the project ID for the Appwrite project\n  .setProject(\"66f30e3a00190df59e00\");\n\n// Create a new instance of the Databases class, passing the client instance as an argument\nexport const database = new Databases(client);","language":".ts","children":[],"resolveSyntax":false,"description":"","prefix":""}],"icon":""},{"id":18,"parentId":16,"label":"CRUD Operations","folder":true,"children":[{"id":19,"parentId":18,"label":"add","value":"export async function addNote(content: string): Promise<Note> {\n  const newNote = { Content: content };\n  console.log(newNote);\n\n  const response = await database.createDocument(\n    \"alnahdiNotes\",\n    \"66f30ee500197dd5171d\",\n    ID.unique(),\n    newNote\n  );\n  const note: Note = {\n    $id: response.$id,\n    $createdAt: response.$createdAt,\n    content: response.content,\n  };\n\n  return note;\n}","language":".ts","children":[],"resolveSyntax":false,"description":"","prefix":""},{"id":20,"parentId":18,"label":"getAll","value":"export async function getNotes(): Promise<Note[]> {\r\n  const response = await database.listDocuments(\r\n    \"alnahdiNotes\",\r\n    \"66f30ee500197dd5171d\"\r\n  );\r\n\r\n  const notes: Note[] = response.documents.map((doc) => ({\r\n    $id: doc.$id,\r\n    content: doc.Content,\r\n    $createdAt: doc.$createdAt,\r\n  }));\r\n\r\n  return notes;\r\n}","language":".ts","children":[]},{"id":21,"parentId":18,"label":"delete","value":"export async function deleteNote(noteId: string): Promise<void> {\r\n  await database.deleteDocument(\"alnahdiNotes\", \"66f30ee500197dd5171d\", noteId);\r\n}","language":".ts","children":[]}]}]}]}